// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Course {
  id              Int               @id @default(autoincrement())
  name            String            @default("Sin Nombre")
  amount          Float             @default(0)
  observations    String?
  extra           Boolean           @default(false)
  invoices        Invoice[]
  studentByCourse StudentByCourse[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  active          Boolean           @default(true)

  @@index(active)
}

model Student {
  id                 Int                 @id @default(autoincrement())
  firstName          String
  lastName           String
  birthDate          DateTime?
  dni                String?
  address            String?
  city               String?
  phone              String?
  mobilePhone        String?
  momPhone           String?
  dadPhone           String?
  observations       String?
  invoices           Invoice[]
  additionals        Additional[]
  receipts           Receipt[]
  studentEnrollments StudentEnrollment[]
  studentByCourse    StudentByCourse[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  active             Boolean             @default(true)
  email              String?

  @@index(firstName)
  @@index(lastName)
}

model StudentByCourse {
  id        Int      @id @default(autoincrement())
  courseId  Int
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  discount  Float    @default(0)

  @@unique([courseId, studentId])
  @@index(studentId)
}

enum InvoiceState {
  I
  P
  B
}

model Invoice {
  id          Int          @id @default(autoincrement())
  month       Int
  year        Int
  description String
  amount      Float
  balance     Float        @default(0)
  state       InvoiceState @default(I)
  expiredAt   DateTime     @default(now())
  paymentDate DateTime?
  studentId   Int
  student     Student      @relation(fields: [studentId], references: [id])
  courseId    Int?
  course      Course?      @relation(fields: [courseId], references: [id])
  items       Item[]
  discount    Float        @default(0)

  @@index([courseId, state, month(sort: Desc), year])
  @@index([studentId, state])
  @@index([studentId, id])
  @@index([studentId, courseId, state])
  @@index([studentId, courseId, state, year])
}

model Additional {
  id          Int       @id @default(autoincrement())
  description String    @default("Sin Descripción")
  amount      Float
  paymentDate DateTime?
  studentId   Int
  student     Student   @relation(fields: [studentId], references: [id])
  items       Item[]
}

enum ReceiptPaymentMethod {
  CASH
  TRANSFER
}

model Receipt {
  id            Int                  @id @default(autoincrement())
  total         Float                @default(0)
  items         Item[]
  studentId     Int
  student       Student              @relation(fields: [studentId], references: [id])
  createdAt     DateTime             @default(now())
  paymentMethod ReceiptPaymentMethod @default(CASH)

  @@index([createdAt(sort: Desc), paymentMethod])
}

model Item {
  id           Int         @id @default(autoincrement())
  description  String      @default("Sin Descripción")
  amount       Float
  receiptId    Int
  receipt      Receipt     @relation(fields: [receiptId], references: [id])
  invoiceId    Int?
  invoice      Invoice?    @relation(fields: [invoiceId], references: [id])
  additionalId Int?
  additional   Additional? @relation(fields: [additionalId], references: [id])
}

model Expenditure {
  id          Int      @id @default(autoincrement())
  description String   @default("Sin Descripción")
  amount      Float
  createdAt   DateTime @default(now())
}

model StudentEnrollment {
  id         Int        @id @default(autoincrement())
  year       Int
  studentId  Int
  student    Student    @relation(fields: [studentId], references: [id])
  enrollment Enrollment @relation(fields: [year], references: [year])

  @@index([year, studentId])
}

model Enrollment {
  id                 Int                 @id @default(autoincrement())
  year               Int                 @unique
  amount             Int
  studentEnrollments StudentEnrollment[]

  @@index([year(sort: Asc)])
}

model CashRegisterInitialBalance {
  id      Int   @id @default(autoincrement())
  balance Float
  year    Int
  month   Int
  day     Int

  @@unique([year, month, day])
  @@index([day, month, year])
}
